x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
dim(theDF)
names(theDF)
names(theDF) [3]
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
class(theDF)
theDF$Sports
theDF[3, 2]
theDF[3, 2:3]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
class(theDF)
theDF[c(3,5), 2]
theDF[c(3,5), 2:3]
theDF[, 3]
theDF[, 2:3]
theDF[2, ]
theDF[c(2,4), ]
theDF[2:4, ]
theDF[, c("First", "Sport")]
theDF[, c("First", "Sport")]
theDF[ , c("First", "Sport")]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
#rows 3 and 5, column 2
theDF[c(3,5), 2] #since only one column was selected it was returned as a vector, the column name will not be printed
#rows 3 and 5, column 2 through 3
theDF[c(3,5), 2:3]
#all of column 3
theDF[, 3]
#all of the columns 2 through 3
theDF[, 2:3]
#all of row 2
theDF[2, ]
#all of rows 2 through 4
theDF[2:4, ]
#access multiple columns by name, make column argument a character vector of the names
theDF[ , c("First", "Sport")]
theDF[ , c("First", "Sports")]
class(theDF[, "Sports"])
class(theDF["Sports"])
class(theDF[["Sports"]])
theDF[, "Sport", drop = FALSE]
theDF[, "Sports", drop = FALSE]
class(theDF[, "Sports", drop = FALSE])
theDF[, 3, drop = FLASE]
theDF[, 3, drop = FALSE]
class(theDF[, 3, drop = FALSE])
newFactor <- factor(c("Pennsylvania", "New York", "New Jersey", "New York", "Tennessee", "Massachusetts", "Pennsylvania", "New York"))
model.matrix(~newFactor - 1)
##  data.frames
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
#rows 3 and 5, column 2
theDF[c(3,5), 2] #since only one column was selected it was returned as a vector, the column name will not be printed
#rows 3 and 5, column 2 through 3
theDF[c(3,5), 2:3]
#all of column 3
theDF[, 3]
#all of the columns 2 through 3
theDF[, 2:3]
#all of row 2
theDF[2, ]
#all of rows 2 through 4
theDF[2:4, ]
#access multiple columns by name, make column argument a character vector of the names
theDF[ , c("First", "Sports")]
class(theDF[, "Sports"])
class(theDF["Sports"])
class(theDF[["Sports"]])
#drop=FALSE, works when specifying a single column by number
theDF[, "Sports", drop = FALSE]
class(theDF[, "Sports", drop = FALSE])
theDF[, 3, drop = FALSE]
class(theDF[, 3, drop = FALSE])
#model.matrix to create a set of indicator variables
#i.e. one column for each level of a factor, with a 1 if a row contains that level or a 0 otherwise
newFactor <- factor(c("Pennsylvania", "New York", "New Jersey", "New York", "Tennessee", "Massachusetts", "Pennsylvania", "New York"))
model.matrix(~newFactor - 1)
##  Lists
list(1, 2, 3)
list(c(1, 2, 3))
list(c(1, 2, 3), 3:5)
(list3 <- list(c(1, 2, 3), 3:7))
list(theDF, 1:10)
list5 <- list(theDF, 1:10, list3)
list5
##  data.frames
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
#rows 3 and 5, column 2
theDF[c(3,5), 2] #since only one column was selected it was returned as a vector, the column name will not be printed
#rows 3 and 5, column 2 through 3
theDF[c(3,5), 2:3]
#all of column 3
theDF[, 3]
#all of the columns 2 through 3
theDF[, 2:3]
#all of row 2
theDF[2, ]
#all of rows 2 through 4
theDF[2:4, ]
#access multiple columns by name, make column argument a character vector of the names
theDF[ , c("First", "Sports")]
class(theDF[, "Sports"])
class(theDF["Sports"])
class(theDF[["Sports"]])
#drop=FALSE, works when specifying a single column by number
theDF[, "Sports", drop = FALSE]
class(theDF[, "Sports", drop = FALSE])
theDF[, 3, drop = FALSE]
class(theDF[, 3, drop = FALSE])
#model.matrix to create a set of indicator variables
#i.e. one column for each level of a factor, with a 1 if a row contains that level or a 0 otherwise
newFactor <- factor(c("Pennsylvania", "New York", "New Jersey", "New York", "Tennessee", "Massachusetts", "Pennsylvania", "New York"))
model.matrix(~newFactor - 1)
##  Lists
# creates a three elements list
list(1, 2, 3)
# creates a single element list where the only element is a vector that has three elements
list(c(1, 2, 3))
# creates a two element list
# the first element is a three element vector
# the second element is a five element vector
(list3 <- list(c(1, 2, 3), 3:7))
# two element list
# first element is a data.frame
# second element is a 10 element vector
list(theDF, 1:10)
# three element list
# first is a data.frame
# second is a vector
# third is list3, which holds two vectors
list5 <- list(theDF, 1:10, list3)
list5
name(list5)
names(list5)
names(list5) <- c("data.frame", "vector", "list")
names(list5)
list5
list6 <- list(TheDataFrame = theDF, TheVector = vector, TheList = list3)
names(list6)
list6
list6 <- list(TheDataFrame = theDF, TheVector = 1:10, TheList = list3)
names(list6)
list6
list6[[1]]
list5[[1]]
list5[["data.frame"]]
list5[[1]]$Sports
list5[[1]][, "Second"]
list5[[1]][, "Second", drop = FALSE]
length(list5)
list5[[4]] <- 2
length(list5)
list5[["NewElement"]] <- 3:6
length(list5)
names(list5)
list5
list5
A <- matrix(1:10, nrow = 5)
#create another 5x2 matrix
B <- matrix(21:30, nrow = 5)
#create another 5x2 matrix
C <- matrix(21:40, nrow = 2)
A
B
C
nrow(A)
ncol(A)
dim(A)
A + B
A * B
A == B
A %*% t(B)
colnames(A)
rownames(A)
colnames(A) <- c("Left", "Right")
rownames(A) <- c("1st", "2nd", "3rd", "4th", "5th")
colnames(A) <- c("Left", "Right")
rownames(A) <- c("1st", "2nd", "3rd", "4th", "5th")
colnames(B) <- c("First", "Second")
rownames(B) <- c("one", "Two", "Three", "Four", "Five")
colnames(C) <- LETTERS[1:10]
colnames(C) <- c("Top", "Bottom")
colnames(C) <- LETTERS[1:10]
rownames(C) <- c("Top", "Bottom")
t(A)
A %*% C
theArray <- array(1:12, dim = c(2, 3, 2))
theArray
theArray <- array(1:12, dim = c(2, 3, 3))
theArray
theArray <- array(1:12, dim = c(2, 3, 4))
theArray
theArray <- array(1:12, dim = c(2, 3, 2))
theArray
theArray[1, ,]
theArray[1, ,1]
theArray[, , 1]
theURL <- "http://www.jaredlander.com/data/Tomato%20First.csv"
tomato <- read.table(file = theURL, header = TRUE, sep = ",")
head(tomato)
library(RODBC)
install.packages("RODBC")
library(RODBC)
db <- odbcConnect("QV Training")
save(tomato, file = "data/tomato.rdata")
theURL <- "http://www.jaredlander.com/data/Tomato%20First.csv"
tomato <- read.table(file = theURL, header = TRUE, sep = ",")
head(tomato
save(tomato, file = "data/tomato.rdata")
save(tomato, file = "data/tomato.rdata")
rm(tomato)
head(tomato)
load("data/tomato.rdata")
head(tomato)
n <- 20
r <- 1:10
w <- data.frame(n, r)
n
r
w
save(n, r, w, file = "data/multiple.rdata")
rm(n, r, w)
n
load("data/multiple.rdata")
n
r
w
library(ggplot2)
data(diamonds)
head(diamonds)
data()
library(XML)
install.packages("XML")
library(XML)
theURL <- "https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactor = FALSE)
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
library(XML)
theURL <- "https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
bowlPool
