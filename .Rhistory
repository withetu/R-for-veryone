x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
dim(theDF)
names(theDF)
names(theDF) [3]
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
class(theDF)
theDF$Sports
theDF[3, 2]
theDF[3, 2:3]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
class(theDF)
theDF[c(3,5), 2]
theDF[c(3,5), 2:3]
theDF[, 3]
theDF[, 2:3]
theDF[2, ]
theDF[c(2,4), ]
theDF[2:4, ]
theDF[, c("First", "Sport")]
theDF[, c("First", "Sport")]
theDF[ , c("First", "Sport")]
x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF
nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)
#Checking column names of a data.frame
names(theDF)
names(theDF) [3]
#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)
head(theDF)
head(theDF, n = 7)
tail(theDF)
#check the class of the data.frame
class(theDF)
#access individual column
theDF$Sports
#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]
#rows 3 and 5, column 2
theDF[c(3,5), 2] #since only one column was selected it was returned as a vector, the column name will not be printed
#rows 3 and 5, column 2 through 3
theDF[c(3,5), 2:3]
#all of column 3
theDF[, 3]
#all of the columns 2 through 3
theDF[, 2:3]
#all of row 2
theDF[2, ]
#all of rows 2 through 4
theDF[2:4, ]
#access multiple columns by name, make column argument a character vector of the names
theDF[ , c("First", "Sport")]
theDF[ , c("First", "Sports")]
class(theDF[, "Sports"])
class(theDF["Sports"])
class(theDF[["Sports"]])
theDF[, "Sport", drop = FALSE]
theDF[, "Sports", drop = FALSE]
class(theDF[, "Sports", drop = FALSE])
theDF[, 3, drop = FLASE]
theDF[, 3, drop = FALSE]
class(theDF[, 3, drop = FALSE])
newFactor <- factor(c("Pennsylvania", "New York", "New Jersey", "New York", "Tennessee", "Massachusetts", "Pennsylvania", "New York"))
model.matrix(~newFactor - 1)
