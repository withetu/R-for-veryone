---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}

##  data.frames


x <- 10:1
y <- -4:5
z <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")

theDF <- data.frame(x, y, z)
theDF
theDF <- data.frame(First = x, Second = y, Sports = z)
theDF

nrow(theDF)
ncol(theDF)
#if nrow() and ncol() both wanted at the same time, then
dim(theDF)

#Checking column names of a data.frame
names(theDF)
names(theDF) [3]

#Checking column names of a data.frame
rownames(theDF)
rownames(theDF) <- c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "ten")
rownames(theDF)
#set them back to generic index
rownames(theDF) <- NULL
rownames(theDF)

head(theDF)
head(theDF, n = 7)
tail(theDF)

#check the class of the data.frame
class(theDF)

#access individual column
theDF$Sports

#get the 3rd row from the 2nd column
theDF[3, 2]
#row 3, column 2 through 3
theDF[3, 2:3]

#rows 3 and 5, column 2
theDF[c(3,5), 2] #since only one column was selected it was returned as a vector, the column name will not be printed

#rows 3 and 5, column 2 through 3
theDF[c(3,5), 2:3]

#all of column 3
theDF[, 3]
#all of the columns 2 through 3
theDF[, 2:3]

#all of row 2
theDF[2, ]
#all of rows 2 through 4
theDF[2:4, ]

#access multiple columns by name, make column argument a character vector of the names
theDF[ , c("First", "Sports")]

class(theDF[, "Sports"])
class(theDF["Sports"])
class(theDF[["Sports"]])

#drop=FALSE, works when specifying a single column by number
theDF[, "Sports", drop = FALSE]
class(theDF[, "Sports", drop = FALSE])
theDF[, 3, drop = FALSE]
class(theDF[, 3, drop = FALSE])

#model.matrix to create a set of indicator variables
#i.e. one column for each level of a factor, with a 1 if a row contains that level or a 0 otherwise
newFactor <- factor(c("Pennsylvania", "New York", "New Jersey", "New York", "Tennessee", "Massachusetts", "Pennsylvania", "New York"))
model.matrix(~newFactor - 1)




##  Lists

# creates a three elements list
list(1, 2, 3)

# creates a single element list where the only element is a vector that has three elements
list(c(1, 2, 3))

# creates a two element list
# the first element is a three element vector
# the second element is a five element vector
(list3 <- list(c(1, 2, 3), 3:7))

# two element list
# first element is a data.frame
# second element is a 10 element vector
list(theDF, 1:10)

# three element list
# first is a data.frame
# second is a vector
# third is list3, which holds two vectors
list5 <- list(theDF, 1:10, list3)
list5

#names: each element has a unique name that can be either viewed or assigned using names
names(list5)
names(list5) <- c("data.frame", "vector", "list")
names(list5)
list5
#Names can be assigned to list elements during creation using name-value pairs
list6 <- list(TheDataFrame = theDF, TheVector = 1:10, TheList = list3)
names(list6)
list6

#TO access an individual element of a list, use []
list5[[1]]
list5[["data.frame"]]
list5[[1]]$Sports
list5[[1]][, "Second"]
list5[[1]][, "Second", drop = FALSE]

#see how long it currently is
length(list5)
#add a fourth element, unnamed
list5[[4]] <- 2
length(list5)
#add a fifth element, named
list5[["NewElement"]] <- 3:6
length(list5)
names(list5)
list5




##  Matrices

#create a 5x2 matrix
A <- matrix(1:10, nrow = 5)
#create another 5x2 matrix
B <- matrix(21:30, nrow = 5)
#create another 5x2 matrix
C <- matrix(21:40, nrow = 2)
A
B
C
nrow(A)
ncol(A)
dim(A)
#add them
A + B
#multiply them
A * B
#see if the elements are equal
A == B
#we will transpose B so it can be used on the right-hand side
A %*% t(B)
colnames(A)
rownames(A)
colnames(A) <- c("Left", "Right")
rownames(A) <- c("1st", "2nd", "3rd", "4th", "5th")
colnames(B) <- c("First", "Second")
rownames(B) <- c("one", "Two", "Three", "Four", "Five")
colnames(C) <- LETTERS[1:10]
rownames(C) <- c("Top", "Bottom")
t(A)
A %*% C




##  Arrays

theArray <- array(1:12, dim = c(2, 3, 2))
theArray
theArray[1, ,]
theArray[1, ,1]
theArray[, , 1]







##    Reading Data into R   ##


##  Reading CSVs

theURL <- "http://www.jaredlander.com/data/Tomato%20First.csv"
tomato <- read.table(file = theURL, header = TRUE, sep = ",")
head(tomato)




##  Reading from Databases

library(RODBC)
db <- odbcConnect("QV Training")




##  R Binary Files

#save the tomato data.frame to disk
save(tomato, file = "data/tomato.rdata")
#remove tomato from memory
rm(tomato)
#check if it still exists
head(tomato)
#read it from the rdata file
load("data/tomato.rdata")
#check of it exists now
head(tomato)
#create few objects to store in a single RData file, remove them and load them again
#create some object
n <- 20
r <- 1:10
w <- data.frame(n, r)
n
r
w
#save them
save(n, r, w, file = "data/multiple.rdata")
#delete them
rm(n, r, w)
#are they gone?
n
r
w
#load them back
load("data/multiple.rdata")
#check them out again
n
r
w




##  Data included with R

library(ggplot2)
data(diamonds)
head(diamonds)
#To find a list of available data
data()




##  Extract Data from Web Sites
#Simple HTML Tables
library(XML)
theURL <- "https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
bowlPool







##    Statistical Graphics   ##






```

Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
